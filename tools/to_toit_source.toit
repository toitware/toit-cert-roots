// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

import bitmap show blit
import crypto.crc
import encoding.base64
import host.file
import host.directory
import tls
import tr show Translator

LABEL       ::= "# Label: \""
EXPIRY      ::= "# Expiry: "
SUBJECT     ::= "# Subject: "
FINGERPRINT ::= "# SHA256 Fingerprint: "
ARANY_START ::= "NETLOCK_ARANY"
BEGIN       ::= "-----BEGIN"
END         ::= "-----END"

class Cert:
  mixed_case_name /string
  name/string  // Toit-ified const name.
  sha_fingerprint /string?  // SHA256 Fingerprint
  data /ByteArray  // DER-encoded raw data.
  comment /string?
  is_deprecated/bool
  expiry/string?
  subject/string?

  constructor .mixed_case_name .name .sha_fingerprint .data --.expiry=null --.subject=null --.comment=null --.is_deprecated=false:

  print_on_stdout -> none:
    print "$(name)_BYTES_ ::= #["
    i := 0
    while i < data.size:
      chunk_size := min 18 (data.size - i)
      while chunk_size < data.size - i and (byte_array_encode_ data[i..i + chunk_size + 1]).size <= 78:
        chunk_size++
      section := data[i..i + chunk_size]
      extra := 78 - (byte_array_encode_ section).size
      print
          byte_array_encode_ section --extra=(extra > 4 ? 0 : extra)
      i += chunk_size
    print "]\n"
    print ""
    print "/**"
    print "$(mixed_case_name)."
    print "This certificate can be added to an HTTP client or a TLS socket with"
    print "  the --root_certificates argument."
    print "It can also be installed on the Toit process, to be used by all TLS"
    print "  sockets that do not have explicit roots, using its install method."
    if comment: print comment
    if sha_fingerprint != null:
      print "SHA256 fingerprint: $sha_fingerprint"
    if expiry != null:
      print "Expiry: $expiry"
    if subject != null:
      print "Subject: $subject"
    hash := tls.add_global_root_certificate_ data

    print "*/"
    if is_deprecated:
      print "$name ::= $(name)_"
      print "$(name)_ ::= tls.RootCertificate --fingerprint=0x$(%x hash) $(name)_BYTES_"
    else:
      print "$name ::= tls.RootCertificate --fingerprint=0x$(%x hash) $(name)_BYTES_"
    print ""

byte_array_encode_ slice/ByteArray --extra/int=0 -> string:
  list := List slice.size: slice[it]
  return "    $((list.map: encode_byte_ it --extra=extra: extra -= it).join ","),"

encode_byte_ byte/int --extra/int=0 [report_extra]-> string:
  if ' ' <= byte <= '~' and byte != '\\' and byte != '\'': return "'$(%c byte)'"
  min_size := "$byte".size
  ["0x$(%02x byte)", "0x$(%x byte)", "$byte"].do: | alt |
    if alt.size - min_size <= extra:
      report_extra.call alt.size - min_size
      return alt
  unreachable

main args/List:
  in_cert_data := false
  name := null
  expiry := null
  subject := null
  fingerprint := null
  mixed_case_name := null
  all_certs := {:}  // Mapping from name in the input to Cert object.
  cert_code := []

  print "/// Root certificates, automatically extracted from Mozilla's NSS"
  print ""
  print "// This file was autogenerated from certdata.txt, which carried the"
  print "// following copyright message:"
  print ""
  print "// This Source Code Form is subject to the terms of the Mozilla Public"
  print "// License, v. 2.0. If a copy of the MPL was not distributed with this"
  print "// file, You can obtain one at http://mozilla.org/MPL/2.0/."
  print ""
  print "import encoding.base64"
  print "import net.x509 as net"
  print "import tls"
  print ""
  print "import .get_root"
  print "export get_root_from_exception"
  print ""

  tr := Translator "a-z .-" "A-Z_"
  squeeze := Translator --squeeze "_" "_"

  (file.read_content args[0]).to_string.trim.split "\n": | line |
    line = line.trim
    if line.starts_with FINGERPRINT:
      fingerprint = line[FINGERPRINT.size..]

    if line.starts_with LABEL:
      mixed_case_name = line[LABEL.size..line.size - 1]
      while all_certs.contains mixed_case_name:
        mixed_case_name += " new"
      name = tr.tr mixed_case_name
      if name.starts_with ARANY_START:
        name = "NETLOCK_ARANY"
      name = squeeze.tr name
    if line.starts_with EXPIRY:
      expiry = line[EXPIRY.size..EXPIRY.size + 10]
    if line.starts_with SUBJECT:
      subject = line[SUBJECT.size..]
    if line.starts_with BEGIN:
      in_cert_data = true
    else if line.starts_with END:
      data := base64.decode (cert_code.join "")
      all_certs[mixed_case_name] =
          Cert
              mixed_case_name
              name
              fingerprint
              data
              --expiry=expiry
              --subject=subject
      fingerprint = null
      in_cert_data = false
      expiry = null
      cert_code = []
    else if in_cert_data:
      cert_code.add line

  DEPRECATED_CERTS.do: | cert/Cert |
    all_certs[cert.mixed_case_name] = cert

  names := all_certs.keys.sort
  names.do: | mixed_case_name |
    cert/Cert := all_certs[mixed_case_name]
    cert.print_on_stdout

  print ""
  print "/**"
  print "A map from certificate name to \$tls.RootCertificate objects."
  print "The certificates can be used for the --root_certificates"
  print "  argument of TLS sockets."
  print "The certificates can also be installed as globally trusted"
  print "  roots using their install method."
  print "*/"
  print "MAP ::= {"
  names.do: | mixed_case_name |
    cert := all_certs[mixed_case_name]
    if not cert.name.contains "TUNTRUST":
      print "  \"$mixed_case_name\": $(cert.name),"
  print "  \"AAA Certificate Services\": COMODO_AAA_SERVICES_ROOT,"
  print "}"
  print ""
  print "/**"
  print "All the trusted roots in the collection.  If you are running"
  print "  on a non-embedded platform with plenty of memory you can just"
  print "  use them all."
  print "#Note"
  print "The TunTrust cert is only intended for .tn domains, but"
  print "  currently we do not support this restriction in our TLS code,"
  print "  therefore it is currently omitted here, and in \$MAP, but is"
  print "  available on an opt-in basis."
  print "#Examples"
  print "```"
  print "  socket := tls.Socket.client tcp"
  print "      --server_name=host"
  print "      --root_certificates=certificate_roots.ALL"
  print "```"
  print "*/"
  print "ALL ::= ["
  names.do: | mixed_case_name |
    cert := all_certs[mixed_case_name]
    if not cert.name.contains "TUNTRUST":
      if cert.is_deprecated:
        print "  $(cert.name)_,"
      else:
        print "  $cert.name,"
  print "]"
  print ""
  print "// Tries to parse a DER-encoded certificate in the most"
  print "// memory-efficient way.  On older VMs, that that fails."
  print "// In that case, it re-encodes the certificate in PEM"
  print "// format, and retries."
  print "parse_ der_encoded_cert/ByteArray -> net.Certificate:"
  print "  catch:"
  print "    return net.Certificate.parse der_encoded_cert"
  print "  lines := [\"-----BEGIN CERTIFICATE-----\"]"
  print "  List.chunk_up 0 der_encoded_cert.size 144: | from to |"
  print "    encoded := base64.encode der_encoded_cert[from..to]"
  print "    List.chunk_up 0 encoded.size 64: | f t |"
  print "      lines.add encoded[f..t]"
  print "  lines.add \"-----END CERTIFICATE-----\\n\""
  print "  return net.Certificate.parse (lines.join \"\\n\")"
  print ""
  print "/**"
  print "Installs all certificate roots on this process so that they are used"
  print "  for any TLS connections that do not have explicit root certificates."
  print "This adds about 180k to the program size."
  print "*/"
  print "install_all_trusted_roots -> none:"
  names.do: | mixed_case_name |
    cert/Cert := all_certs[mixed_case_name]
    hash := tls.add_global_root_certificate_ cert.data
    print "  $(cert.name).install"
  print ""
  print "/**"
  print "Common certificate roots."
  print "*/"
  print "COMMON_TRUSTED_ROOTS ::= ["
  print "  DIGICERT_GLOBAL_ROOT_G2,"
  print "  DIGICERT_GLOBAL_ROOT_CA,"
  print "  GLOBALSIGN_ROOT_CA,"
  print "  GLOBALSIGN_ROOT_CA_R3,"
  print "  COMODO_RSA_CERTIFICATION_AUTHORITY,"
  print "  BALTIMORE_CYBERTRUST_ROOT,"
  print "  USERTRUST_ECC_CERTIFICATION_AUTHORITY,"
  print "  USERTRUST_RSA_CERTIFICATION_AUTHORITY,"
  print "  DIGICERT_HIGH_ASSURANCE_EV_ROOT_CA,"
  print "  ISRG_ROOT_X1,"
  print "  STARFIELD_CLASS_2_CA,"
  print "]"
  print ""
  print "/**"
  print "Installs common certificate roots on this process so that they are used"
  print "  for any TLS connections that do not have explicit root certificates."
  print "This adds about 14k to the program size."
  print "*/"
  print "install_common_trusted_roots -> none:"
  print "  COMMON_TRUSTED_ROOTS.do: it.install"

GLOBALSIGN_PEM ::= """
    MIIDujCCAqKgAwIBAgILBAAAAAABD4Ym5g0wDQYJKoZIhvcNAQEFBQAwTDEgMB4G
    A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjIxEzARBgNVBAoTCkdsb2JhbFNp
    Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDYxMjE1MDgwMDAwWhcNMjExMjE1
    MDgwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMjETMBEG
    A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI
    hvcNAQEBBQADggEPADCCAQoCggEBAKbPJA6+Lm8omUVCxKs+IVSbC9N/hHD6ErPL
    v4dfxn+G07IwXNb9rfF73OX4YJYJkhD10FPe+3t+c4isUoh7SqbKSaZeqKeMWhG8
    eoLrvozps6yWJQeXSpkqBy+0Hne/ig+1AnwblrjFuTosvNYSuetZfeLQBoZfXklq
    tTleiDTsvHgMCJiEbKjNS7SgfQx5TfC4LcshytVsW33hoCmEofnTlEnLJGKRILzd
    C9XZzPnqJworc5HGnRusyMvo4KD0L5CLTfuwNhv2GXqF4G3yYROIXJ/gkwpRl4pa
    zq+r1feqCapgvdzZX99yqWATXgAByUr6P6TqBwMhAo6CygPCm48CAwEAAaOBnDCB
    mTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUm+IH
    V2ccHsBqBt5ZtJot39wZhi4wNgYDVR0fBC8wLTAroCmgJ4YlaHR0cDovL2NybC5n
    bG9iYWxzaWduLm5ldC9yb290LXIyLmNybDAfBgNVHSMEGDAWgBSb4gdXZxwewGoG
    3lm0mi3f3BmGLjANBgkqhkiG9w0BAQUFAAOCAQEAmYFThxxol4aR7OBKuEQLq4Gs
    J0/WwbgcQ3izDJr86iw8bmEbTUsp9Z8FHSbBuOmDAGJFtqkIk7mpM0sYmsL4h4hO
    291xNBrBVNpGP+DTKqttVCL1OmLNIG+6KYnX3ZHu01yiPqFbQfXf5WRDLenVOavS
    ot+3i9DAgBkcRcAtjOj4LaR0VknFBbVPFd5uRHg5h6h+u/N5GJG79G+dwfCMNYxd
    AfvDbbnvRG15RjF+Cv6pgsH/76tuIMRQyV+dTZsXjAzlAcmgQWpzU/qlULRuJQ/7
    TBj0/VLZjmmx6BEP3ojY+x1J96relc8geMJgEtslQIxq/H5COEBkEveegeGTLg==
    """

DST_PEM ::= """
    MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA/
    MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT
    DkRTVCBSb290IENBIFgzMB4XDTAwMDkzMDIxMTIxOVoXDTIxMDkzMDE0MDExNVow
    PzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMRcwFQYDVQQD
    Ew5EU1QgUm9vdCBDQSBYMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
    AN+v6ZdQCINXtMxiZfaQguzH0yxrMMpb7NnDfcdAwRgUi+DoM3ZJKuM/IUmTrE4O
    rz5Iy2Xu/NMhD2XSKtkyj4zl93ewEnu1lcCJo6m67XMuegwGMoOifooUMM0RoOEq
    OLl5CjH9UL2AZd+3UWODyOKIYepLYYHsUmu5ouJLGiifSKOeDNoJjj4XLh7dIN9b
    xiqKqy69cK3FCxolkHRyxXtqqzTWMIn/5WgTe1QLyNau7Fqckh49ZLOMxt+/yUFw
    7BZy1SbsOFU5Q9D8/RhcQPGX69Wam40dutolucbY38EVAjqr2m7xPi71XAicPNaD
    aeQQmxkqtilX4+U9m5/wAl0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNV
    HQ8BAf8EBAMCAQYwHQYDVR0OBBYEFMSnsaR7LHH62+FLkHX/xBVghYkQMA0GCSqG
    SIb3DQEBBQUAA4IBAQCjGiybFwBcqR7uKGY3Or+Dxz9LwwmglSBd49lZRNI+DT69
    ikugdB/OEIKcdBodfpga3csTS7MgROSR6cz8faXbauX+5v3gTt23ADq1cEmv8uXr
    AvHRAosZy5Q6XkjEGB5YGV8eAlrwDPGxrancWYaLbumR9YbK+rlmM6pZW87ipxZz
    R8srzJmwN0jP41ZL9c8PDHIyh8bwRLtTcm1D9SZImlJnt1ir/md2cXjbDaJWFBM5
    JDGFoqgCWjBH4d1QB7wCCZAA62RjYJsWvIjJEubSfZGL+T0yjWW06XyxV3bqxbYo
    Ob8VZRzI9neWagqNdwvYkQsEjgfbKbYK7p2CNTUQ
    """

CYBERTRUST_PEM ::= """
    MIIDoTCCAomgAwIBAgILBAAAAAABD4WqLUgwDQYJKoZIhvcNAQEFBQAwOzEYMBYG
    A1UEChMPQ3liZXJ0cnVzdCwgSW5jMR8wHQYDVQQDExZDeWJlcnRydXN0IEdsb2Jh
    bCBSb290MB4XDTA2MTIxNTA4MDAwMFoXDTIxMTIxNTA4MDAwMFowOzEYMBYGA1UE
    ChMPQ3liZXJ0cnVzdCwgSW5jMR8wHQYDVQQDExZDeWJlcnRydXN0IEdsb2JhbCBS
    b290MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA+Mi8vRRQZhP/8NN5
    7CPytxrHjoXxEnOmGaoQ25yiZXRadz5RfVb23CO21O1fWLE3TdVJDm71aofW0ozS
    J8bi/zafmGWgE07GKmSb1ZASzxQG9Dvj1Ci+6A74q05IlG2OlTEQXO2iLb3VOm2y
    HLtgwEZLAfVJrn5GitB0jaEMAs7u/OePuGtm839EAL9mJRQr3RAwHQeWP032a7iP
    t3sMpTjr3kfb1V05/Iin89cqdPHoWqI7n1C6poxFNcJQZZXcY4Lv3b93TZxiyWNz
    FtApD0mpSPCzqrdsxacwOUBdrsTiXSZT8M4cIwhhqJQZugRiQOwfOHB3EgZxpzAY
    XSUnpQIDAQABo4GlMIGiMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/
    MB0GA1UdDgQWBBS2CHsNesysIEyGVjJez6tuhS1wVzA/BgNVHR8EODA2MDSgMqAw
    hi5odHRwOi8vd3d3Mi5wdWJsaWMtdHJ1c3QuY29tL2NybC9jdC9jdHJvb3QuY3Js
    MB8GA1UdIwQYMBaAFLYIew16zKwgTIZWMl7Pq26FLXBXMA0GCSqGSIb3DQEBBQUA
    A4IBAQBW7wojoFROlZfJ+InaRcHUowAl9B8Tq7ejhVhpwjCt2BWKLePJzYFa+HMj
    Wqd8BfP9IjsO0QbE2zZMcwSO5bAi5MXzLqXZI+O4Tkogp24CJJ8iYGd7ix1yCcUx
    XOl5n4BHPa2hCwcUPUf/A2kaDAtE52Mlp3+yybh2hO0j9n0Hq0V+09+zv+mKts2o
    omcrUtW3ZfA5TGOgkXmTUg9U3YO7n9GPp1Nzw8v/MOx8BLjYRB+TX3EJIrduPuoc
    A06dGiBh+4E37F78CkWr1+cXVdCg6mCbpvbjjFspwgZgFJ0tl0ypkxWdYcQBX0jW
    WL1WMRJOEcgh4LMRkWXbtKaIOM5V
    """

NETWORK_SOLUTIONS_CERTIFICATE_AUTHORITY_PEM ::= """
    MIID5jCCAs6gAwIBAgIQV8szb8JcFuZHFhfjkDFo4DANBgkqhkiG9w0BAQUFADBi
    MQswCQYDVQQGEwJVUzEhMB8GA1UEChMYTmV0d29yayBTb2x1dGlvbnMgTC5MLkMu
    MTAwLgYDVQQDEydOZXR3b3JrIFNvbHV0aW9ucyBDZXJ0aWZpY2F0ZSBBdXRob3Jp
    dHkwHhcNMDYxMjAxMDAwMDAwWhcNMjkxMjMxMjM1OTU5WjBiMQswCQYDVQQGEwJV
    UzEhMB8GA1UEChMYTmV0d29yayBTb2x1dGlvbnMgTC5MLkMuMTAwLgYDVQQDEydO
    ZXR3b3JrIFNvbHV0aW9ucyBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwggEiMA0GCSqG
    SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDkvH6SMG3G2I4rC7xGzuAnlt7e+foS0zwz
    c7MEL7xxjOWftiJgPl9dzgn/ggwbmlFQGiaJ3dVhXRncEg8tCqJDXRfQNJIg6nPP
    OCwGJgl6cvf6UDL4wpPTaaIjzkGxzOTVHzbRijr4jGPiFFlp7Q3Tf2vouAPlT2rl
    mGNpSAW+Lv8ztumXWWn4Zxmuk2GWRBXTcrA/vGp97Eh/jcOrqnErU2lBUzS1sLnF
    BgrEsEX1QV1uiUV7PTsmjHTC5dLRfbIR1PtYMiKagMnc/Qzpf14Dl847ABSHJ3A4
    qY5usyd2mFHgBeMhqxrVhSI8KbWaFsWAqPS7azCPL0YCorEMIuDTAgMBAAGjgZcw
    gZQwHQYDVR0OBBYEFCEwyfsA106Y2oeqKtCnLrFAMadMMA4GA1UdDwEB/wQEAwIB
    BjAPBgNVHRMBAf8EBTADAQH/MFIGA1UdHwRLMEkwR6BFoEOGQWh0dHA6Ly9jcmwu
    bmV0c29sc3NsLmNvbS9OZXR3b3JrU29sdXRpb25zQ2VydGlmaWNhdGVBdXRob3Jp
    dHkuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQC7rkvnt1frf6ott3NHhWrB5KUd5Oc8
    6fRZZXe1eltajSU24HqXLjjAV2CDmAaDn7l2em5Q4LqILPxFzBiwmZVRDuwduIj/
    h1AcgsLj4DKAv6ALR8jDMe+ZZzKATxcheQxpXN5eNK4CtSbqUN9/GGUsyfJj4akH
    /nxxH2szJGoeBfcFaMBqEssuXmHLrijTfsK0ZpEmXzwuJF/LWA/rKOyvEZbz3Htv
    wKeI8lN3s2Berq4o2jUsbzRF0ybh3uxbTydrFny9RAQYgrOJeRcQcT16ohZO9QHN
    pGxlaKFJdlxDydi8NmdspZS11My5vWo1ViHe2MPr+8ukYEywVaCge1ey
    """

EC_ACC_PEM ::= """
    MIIFVjCCBD6gAwIBAgIQ7is969Qh3hSoYqwE893EATANBgkqhkiG9w0BAQUFADCB
    8zELMAkGA1UEBhMCRVMxOzA5BgNVBAoTMkFnZW5jaWEgQ2F0YWxhbmEgZGUgQ2Vy
    dGlmaWNhY2lvIChOSUYgUS0wODAxMTc2LUkpMSgwJgYDVQQLEx9TZXJ2ZWlzIFB1
    YmxpY3MgZGUgQ2VydGlmaWNhY2lvMTUwMwYDVQQLEyxWZWdldSBodHRwczovL3d3
    dy5jYXRjZXJ0Lm5ldC92ZXJhcnJlbCAoYykwMzE1MDMGA1UECxMsSmVyYXJxdWlh
    IEVudGl0YXRzIGRlIENlcnRpZmljYWNpbyBDYXRhbGFuZXMxDzANBgNVBAMTBkVD
    LUFDQzAeFw0wMzAxMDcyMzAwMDBaFw0zMTAxMDcyMjU5NTlaMIHzMQswCQYDVQQG
    EwJFUzE7MDkGA1UEChMyQWdlbmNpYSBDYXRhbGFuYSBkZSBDZXJ0aWZpY2FjaW8g
    KE5JRiBRLTA4MDExNzYtSSkxKDAmBgNVBAsTH1NlcnZlaXMgUHVibGljcyBkZSBD
    ZXJ0aWZpY2FjaW8xNTAzBgNVBAsTLFZlZ2V1IGh0dHBzOi8vd3d3LmNhdGNlcnQu
    bmV0L3ZlcmFycmVsIChjKTAzMTUwMwYDVQQLEyxKZXJhcnF1aWEgRW50aXRhdHMg
    ZGUgQ2VydGlmaWNhY2lvIENhdGFsYW5lczEPMA0GA1UEAxMGRUMtQUNDMIIBIjAN
    BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsyLHT+KXQpWIR4NA9h0X84NzJB5R
    85iKw5K4/0CQBXCHYMkAqbWUZRkiFRfCQ2xmRJoNBD45b6VLeqpjt4pEndljkYRm
    4CgPukLjbo73FCeTae6RDqNfDrHrZqJyTxIThmV6PttPB/SnCWDaOkKZx7J/sxaV
    HMf5NLWUhdWZXqBIoH7nF2W4onW4HvPlQn2v7fOKSGRdghST2MDk/7NQcvJ29rNd
    QlB50JQ+awwAvthrDk4q7D7SzIKiGGUzE3eeml0aE9jD2z3Il3rucO2n5nzbcc8t
    lGLfbdb1OL4/pYUKGbio2Al1QnDE6u/LDsg0qBIimAy4E5S2S+zw0JDnJwIDAQAB
    o4HjMIHgMB0GA1UdEQQWMBSBEmVjX2FjY0BjYXRjZXJ0Lm5ldDAPBgNVHRMBAf8E
    BTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUoMOLRKo3pUW/l4Ba0fF4
    opvpXY0wfwYDVR0gBHgwdjB0BgsrBgEEAfV4AQMBCjBlMCwGCCsGAQUFBwIBFiBo
    dHRwczovL3d3dy5jYXRjZXJ0Lm5ldC92ZXJhcnJlbDA1BggrBgEFBQcCAjApGidW
    ZWdldSBodHRwczovL3d3dy5jYXRjZXJ0Lm5ldC92ZXJhcnJlbCAwDQYJKoZIhvcN
    AQEFBQADggEBAKBIW4IB9k1IuDlVNZyAelOZ1Vr/sXE7zDkJlF7W2u++AVtd0x7Y
    /X1PzaBB4DSTv8vihpw3kpBWHNzrKQXlxJ7HNd+KDM3FIUPpqojlNcAZQmNaAl6k
    SBg6hW/cnbw/nZzBh7h6YQjpdwt/cKt63dmXLGQehb+8dJahw3oS7AwaboMMPOhy
    Rp/7SNVel+axofjk70YllJyJ22k4vuxcDlbHZVHlUIiIv0LVKz3l+bqeLrPK9HOS
    Agu+TGbrIP65y7WZf+a2E/rKS03Z7lNGBjvGTq2TWoF+bCpLagVFjPIhpDGQh2xl
    nJ2lYJU6Un/10asIbvPuW/mIPX64b24D5EI=
    """

HELLENIC_ACADEMIC_AND_RESEARCH_INSTITUTIONS_ROOTCA_2011_PEM ::= """
    MIIEMTCCAxmgAwIBAgIBADANBgkqhkiG9w0BAQUFADCBlTELMAkGA1UEBhMCR1Ix
    RDBCBgNVBAoTO0hlbGxlbmljIEFjYWRlbWljIGFuZCBSZXNlYXJjaCBJbnN0aXR1
    dGlvbnMgQ2VydC4gQXV0aG9yaXR5MUAwPgYDVQQDEzdIZWxsZW5pYyBBY2FkZW1p
    YyBhbmQgUmVzZWFyY2ggSW5zdGl0dXRpb25zIFJvb3RDQSAyMDExMB4XDTExMTIw
    NjEzNDk1MloXDTMxMTIwMTEzNDk1MlowgZUxCzAJBgNVBAYTAkdSMUQwQgYDVQQK
    EztIZWxsZW5pYyBBY2FkZW1pYyBhbmQgUmVzZWFyY2ggSW5zdGl0dXRpb25zIENl
    cnQuIEF1dGhvcml0eTFAMD4GA1UEAxM3SGVsbGVuaWMgQWNhZGVtaWMgYW5kIFJl
    c2VhcmNoIEluc3RpdHV0aW9ucyBSb290Q0EgMjAxMTCCASIwDQYJKoZIhvcNAQEB
    BQADggEPADCCAQoCggEBAKlTAOMupvaO+mDYLZU++CwqVE7NuYRhlFhPjz2L5EPz
    dYmNUeTDN9KKiE15HrcS3UN4SoqS5tdI1Q+kOilENbgH9mgdVc04UfCMJDGFr4PJ
    fel3r+0ae50X+bOdOFAPplp5kYCvN66m0zH7tSYJnTxa71HFK9+WXesyHgLacEns
    bgzImjeN9/E2YEsmLIKe0HjzDQ9jpFEw4fkrJxIH2Oq9GGKYsFk3fb7u8yBRQlqD
    75O6aRXxYp2fmTmCobd0LovUxQt7L/DICto9eQqakxylKHJzkUOap9FNhYS5qXSP
    FEDH3N6sQWRstBmbAmNtJGSPRLIl6s5ddAxjMlyNh+UCAwEAAaOBiTCBhjAPBgNV
    HRMBAf8EBTADAQH/MAsGA1UdDwQEAwIBBjAdBgNVHQ4EFgQUppFC/RNhSiOeCKQp
    5dgTBCPuQSUwRwYDVR0eBEAwPqA8MAWCAy5ncjAFggMuZXUwBoIELmVkdTAGggQu
    b3JnMAWBAy5ncjAFgQMuZXUwBoEELmVkdTAGgQQub3JnMA0GCSqGSIb3DQEBBQUA
    A4IBAQAf73lB4XtuP7KMhjdCSk4cNx6NZrokgclPEg8hwAOXhiVtXdMiKahsog2p
    6z0GW5k6x8zDmjR/qw7IThzh+uTczQ2+vyT+bOdrwg3IBp5OjWEopmr95fZi6hg8
    TqBTnbI6nOulnJEWtk2C4AwFSKls9cz4y51JtPACpf1wA+2KIaWuE4ZJwzNzvoc7
    dIsXRSZMFpGD/md9zU1jZ/rzAxKWeAaNsWftjj++n08C9bMJL/NMh98qy5V8Acys
    Nnq/onN694/BtZqhFLKPM58N7yLcZnuEvUUXBj08yrl3NI/K6s8/MT7jiOOASSXI
    l7WdmplNsDz4SgCbZN2fOUvRJ9e4
    """

STAAT_DER_NEDERLANDEN_EV_ROOT_CA_PEM ::= """
    MIIFcDCCA1igAwIBAgIEAJiWjTANBgkqhkiG9w0BAQsFADBYMQswCQYDVQQGEwJO
    TDEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMSkwJwYDVQQDDCBTdGFh
    dCBkZXIgTmVkZXJsYW5kZW4gRVYgUm9vdCBDQTAeFw0xMDEyMDgxMTE5MjlaFw0y
    MjEyMDgxMTEwMjhaMFgxCzAJBgNVBAYTAk5MMR4wHAYDVQQKDBVTdGFhdCBkZXIg
    TmVkZXJsYW5kZW4xKTAnBgNVBAMMIFN0YWF0IGRlciBOZWRlcmxhbmRlbiBFViBS
    b290IENBMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA48d+ifkkSzrS
    M4M1LGns3Amk41GoJSt5uAg94JG6hIXGhaTK5skuU6TJJB79VWZxXSzFYGgEt9nC
    UiY4iKTWO0Cmws0/zZiTs1QUWJZV1VD+hq2kY39ch/aO5ieSZxeSAgMs3NZmdO3d
    Z//BYY1jTw+bbRcwJu+r0h8QoPnFfxZpgQNH7R5ojXKhTbImxrpsX23Wr9GxE46p
    rfNeaXUmGD5BKyF/7otdBwadQ8QpCiv8Kj6GyzyDOvnJDdrFmeK8eEEzduG/L13l
    pJhQDBXd4Pqcfzho0LKmeqfRMb1+ilgnQ7O6M5HTp5gVXJrm0w912fxBmJc+qiXb
    j5IusHsMX/FjqTf5m3VpTCgmJdrV8hJwRVXj33NeN/UhbJCONVrJ0yPr08C+eKxC
    KFhmpUZtcALXEPlLVPxdhkqHz3/KRawRWrUgUY0viEeXOcDPusBCAUCZSCELa6fS
    /ZbV0b5GnUngC6agIk440ME8MLxwjyx1zNDFjFE7PZQIZCZhfbnDZY8UnCHQqv0X
    cgOPvZuM5l5Tnrmd74K74bzickFbIZTTRTeU0d8JOV3nI6qaHcptqAqGhYqCvkIH
    1vI4gnPah1vlPNOePqc7nvQDs/nxfRN0Av+7oeX6AHkcpmZBiFxgV6YuCcS6/ZrP
    px9Aw7vMWgpVSzs4dlG4Y4uElBbmVvMCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB
    /zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFP6rAJCYniT8qcwaivsnuL8wbqg7
    MA0GCSqGSIb3DQEBCwUAA4ICAQDPdyxuVr5Os7aEAJSrR8kN0nbHhp8dB9O2tLsI
    eK9p0gtJ3jPFrK3CiAJ9Brc1AsFgyb/E6JTe1NOpEyVa/m6irn0F3H3zbPB+po3u
    2dfOWBfoqSmuc0iH55vKbimhZF8ZE/euBhD/UcabTVUlT5OZEAFTdfETzsemQUHS
    v4ilf0X8rLiltTMMgsT7B/Zq5SWEXwbKwYY5EdtYzXc7LMJMD16a4/CrPmEbUCTC
    wPTxGfARKbalGAKb12NMcIxHowNDXLldRqANb/9Zjr7dn3LDWyvfjFvO5QxGbJKy
    CqNMVEIYFRIYvdr8unRu/8G2oGTYqV9Vrp9canaW2HNnh/tNf1zuacpzEPuKqf2e
    vTY4SUmH9A4U8OmHuD+nT3pajnnUk+S7aFKErGzp85hwVXIy+TSrK0m1zSBi5Dp6
    Z2Orltxtrpfs/J92VoguZs9btsmksNcFuuEnL5O7Jiqik7Ab846+HUCjuTaPPoIa
    Gl6I6lD4WeKDRikL40Rc4ZW2aZCaFG+XroHPaO+Zmr615+F/+PoTRxZMzG0IQOeL
    eG9QgkRQP2YGiqtDhFZKDyAthg710tvSeopLzaXoTvFeJiUBWSOgftL2fiFX1ye8
    FVdMpEbB4IMeDExNH08GGeL5qPQ6gqGyeUN51q1veieQA6TqJIc/2b3Z6fJfUEkc
    7uzXLg==
    """

DST_BYTES ::= base64.decode ((DST_PEM.split "\n").join "")
CYBERTRUST_BYTES ::= base64.decode ((CYBERTRUST_PEM.split "\n").join "")
GLOBALSIGN_BYTES ::= base64.decode ((GLOBALSIGN_PEM.split "\n").join "")
NETWORK_SOLUTIONS_CERTIFICATE_AUTHORITY_BYTES ::= base64.decode ((NETWORK_SOLUTIONS_CERTIFICATE_AUTHORITY_PEM.split "\n").join "")
EC_ACC_BYTES ::= base64.decode ((EC_ACC_PEM.split "\n").join "")
HELLENIC_ACADEMIC_AND_RESEARCH_INSTITUTIONS_ROOTCA_2011_BYTES ::= base64.decode ((HELLENIC_ACADEMIC_AND_RESEARCH_INSTITUTIONS_ROOTCA_2011_PEM.split "\n").join "")
STAAT_DER_NEDERLANDEN_EV_ROOT_CA_BYTES ::= base64.decode ((STAAT_DER_NEDERLANDEN_EV_ROOT_CA_PEM.split "\n").join "")

/// These certificates are no longer in Mozillas store because they
/// expired, but we keep them in our package to keep it backwards
/// compatible.  Because Toit does not normally check expiry dates
/// on certificates they are likely to still work.
DEPRECATED_CERTS ::= [
  Cert
      --is_deprecated
      "GlobalSign Root CA - R2"
      "GLOBALSIGN_ROOT_CA_R2"
      null
      GLOBALSIGN_BYTES
      --comment="Deprecated.  This certificate has expired.",
  Cert
      --is_deprecated
      "DST Root CA X3"
      "DST_ROOT_CA_X3"
      null
      DST_BYTES
      --comment="Deprecated.  This certificate has expired.  Usually the replacement\n  is \$ISRG_ROOT_X1.",
  Cert
      --is_deprecated
      "Cybertrust Global Root"
      "CYBERTRUST_GLOBAL_ROOT"
      null
      CYBERTRUST_BYTES
      --comment="Deprecated.  This certificate has expired.",
  Cert
      --is_deprecated
      "Network Solutions Certificate Authority"
      "NETWORK_SOLUTIONS_CERTIFICATE_AUTHORITY"
      null
      NETWORK_SOLUTIONS_CERTIFICATE_AUTHORITY_BYTES
      --comment="Deprecated.  This certificate has expired.",
  Cert
      --is_deprecated
      "EC-ACC"
      "EC_ACC"
      null
      EC_ACC_BYTES
      --comment="Deprecated.  This certificate has expired.",
  Cert
      --is_deprecated
      "Hellenic Academic and Research Institutions RootCA 2011"
      "HELLENIC_ACADEMIC_AND_RESEARCH_INSTITUTIONS_ROOTCA_2011"
      null
      HELLENIC_ACADEMIC_AND_RESEARCH_INSTITUTIONS_ROOTCA_2011_BYTES
      --comment="Deprecated.  This certificate has expired.",
  Cert
      --is_deprecated
      "Staat der Nederlanden EV Root CA"
      "STAAT_DER_NEDERLANDEN_EV_ROOT_CA"
      null
      STAAT_DER_NEDERLANDEN_EV_ROOT_CA_BYTES
      --comment="Deprecated.  This certificate has expired.",
]
