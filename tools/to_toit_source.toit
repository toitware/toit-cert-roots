// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

import bitmap show blit
import encoding.base64
import host.file
import host.directory
import tr show Translator

LABEL       ::= "# Label: \""
FINGERPRINT ::= "# SHA256 Fingerprint: "
ARANY_START ::= "NETLOCK_ARANY"
BEGIN       ::= "-----BEGIN"
END         ::= "-----END"

class Cert:
  mixed_case_name /string
  name/string  // Toit-ified const name.
  sha_fingerprint /string?  // SHA256 Fingerprint
  data /ByteArray  // DER-encoded raw data.

  constructor .mixed_case_name .name .sha_fingerprint .data:

  print_on_stdout -> none:
    print "$(name)_TEXT_ ::= \"\"\"\\"
    print "-----BEGIN CERTIFICATE-----"
    encoded := (base64.encode data)
    List.chunk_up 0 encoded.size 64: | from to |
      print encoded[from..to]
    print "-----END CERTIFICATE-----"
    print "\"\"\""
    print ""
    print "/**"
    print "$(mixed_case_name)."
    if sha_fingerprint != null:
      print "SHA256 fingerprint: $sha_fingerprint"
    print "*/"
    print "$name ::= net.Certificate.parse $(name)_TEXT_"
    print ""

main args/List:
  in_cert_data := false
  name := null
  fingerprint := null
  mixed_case_name := null
  all_certs := {:}  // Mapping from name in the input to Cert object.
  cert_code := []

  print "/// Root certificates, automatically extracted from Mozilla's NSS"
  print ""
  print "// This file was autogenerated from certdata.txt, which carried the"
  print "// following copyright message:"
  print ""
  print "// This Source Code Form is subject to the terms of the Mozilla Public"
  print "// License, v. 2.0. If a copy of the MPL was not distributed with this"
  print "// file, You can obtain one at http://mozilla.org/MPL/2.0/."
  print ""
  print "import net.x509 as net"
  print ""
  print "import .get_root"
  print "export get_root_from_exception"
  print ""

  tr := Translator "a-z .-" "A-Z_"
  squeeze := Translator --squeeze "_" "_"

  (file.read_content args[0]).to_string.trim.split "\n": | line |
    line = line.trim
    if line.starts_with FINGERPRINT:
      fingerprint = line[FINGERPRINT.size..]

    if line.starts_with LABEL:
      mixed_case_name = line[LABEL.size..line.size - 1]
      while all_certs.contains mixed_case_name:
        mixed_case_name += " new"
      name = tr.tr mixed_case_name
      if name.starts_with ARANY_START:
        name = "NETLOCK_ARANY"
      name = squeeze.tr name
    if line.starts_with BEGIN:
      in_cert_data = true
    else if line.starts_with END:
      data := base64.decode (cert_code.join "")
      all_certs[mixed_case_name] =
          Cert
              mixed_case_name
              name
              fingerprint
              data
      fingerprint = null
      in_cert_data = false
      cert_code = []
    else if in_cert_data:
      cert_code.add line

  legacy_order := []
  all_certs.do: | mixed_case_name cert |
    constant_name := cert.name
    if not constant_name.starts_with "GTS_ROOT_R" and constant_name != "GLOBALSIGN_ECC_ROOT_CA_R4":
      if mixed_case_name == "GlobalSign ECC Root CA - R5":
        legacy_order.add "GlobalSign ECC Root CA - R4"
      else if mixed_case_name == "UCA Global G2 Root":
        4.repeat:
          legacy_order.add "GTS Root R$(it + 1)"
      legacy_order.add mixed_case_name

  legacy_order.do: | mixed_case_name |
    cert/Cert := all_certs[mixed_case_name]
    cert.print_on_stdout

  print ""
  print "/**"
  print "A map from certificate name to certificate in text form."
  print "The text forms must be parsed with net.Certificate.parse"
  print "  before they can be used as the --root_certificates argument"
  print "*/"
  print "MAP ::= {"
  legacy_order.do: | mixed_case_name |
    cert := all_certs[mixed_case_name]
    if not cert.name.contains "TUNTRUST":
      print "  \"$mixed_case_name\": $(cert.name)_TEXT_,"
  print "  \"AAA Certificate Services\": COMODO_AAA_SERVICES_ROOT_TEXT_,"
  print "}"
  print ""
  print "/**"
  print "All the trusted roots in the collection.  If you are running"
  print "  on a non-embedded platform with plenty of memory you can just"
  print "  use them all."
  print "#Note"
  print "The TunTrust cert is only intended for .tn domains, but"
  print "  currently we do not support this restriction in our TLS code,"
  print "  therefore it is currently omitted here, and in \$MAP, but is"
  print "  available on an opt-in basis."
  print "#Examples"
  print "```"
  print "  socket := tls.Socket.client tcp"
  print "      --server_name=host"
  print "      --root_certificates=certificate_roots.ALL"
  print "```"
  print "*/"
  print "ALL ::= ["
  legacy_order.do: | mixed_case_name |
    cert := all_certs[mixed_case_name]
    if not cert.name.contains "TUNTRUST":
      print "  $cert.name,"
  print "]"
