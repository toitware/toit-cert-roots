# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import fileinput
import re
import string

label_re = re.compile("^# Label: \"(.*)\"$")
fingerprint_re = re.compile("^# SHA256 Fingerprint: (.*)$")
arany_re = re.compile("^NETLOCK_ARANY")
begin_re = re.compile("^-----BEGIN")
end_re = re.compile("^-----END")

printing = False
name = None
fingerprint = None
mixed_case_name = None
all_certs = {}

print("/// Root certificates, automatically extracted from Mozilla's NSS")
print("")
print("// This file was autogenerated from certdata.txt, which carried the")
print("// following copyright message:")
print("")
print("// This Source Code Form is subject to the terms of the Mozilla Public")
print("// License, v. 2.0. If a copy of the MPL was not distributed with this")
print("// file, You can obtain one at http://mozilla.org/MPL/2.0/.")
print("")
print("import net.x509 as net")
print("")
print("import .get_root")
print("export get_root_from_exception")
print("")

for line in fileinput.input():
    line = line.strip()
    captures = fingerprint_re.search(line)
    if captures != None:
        fingerprint = captures.group(1)
    captures = label_re.search(line)
    if captures != None:
        mixed_case_name = captures.group(1)
        upper_case = mixed_case_name.maketrans(
            "abcdefghijklmnopqrstuvwxyz -.",
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ___")
        name = mixed_case_name.translate(upper_case)
        if arany_re.match(name) != None:
            name = "NETLOCK_ARANY"
        name = re.sub('_+', "_", name)
    if begin_re.match(line):
        printing = True
        print("%s_TEXT_ ::= \"\"\"\\" % (name))
        all_certs[mixed_case_name] = name
    if printing:
        print(line)
    if end_re.match(line):
        printing = False
        print("\"\"\"")
        print("")
        print("/**")
        print("%s." % (mixed_case_name))
        if fingerprint != None:
          print("SHA256 fingerprint: %s" % (fingerprint))
        fingerprint = None
        print("*/")
        print("%s ::= net.Certificate.parse %s_TEXT_" % (name, name))
        print("")

print("")
print("/**")
print("A map from certificate name to certificate in text form.")
print("The text forms must be parsed with net.Certificate.parse")
print("  before they can be used as the --root_certificates argument")
print("*/")
print("MAP ::= {")
for name in all_certs:
    cert = all_certs[name]
    if "TUNTRUST" not in cert:
      print("  \"%s\": %s_TEXT_," % (name, cert))
print("  \"AAA Certificate Services\": COMODO_AAA_SERVICES_ROOT_TEXT_,")
print("}")
print("")
print("/**")
print("All the trusted roots in the collection.  If you are running")
print("  on a non-embedded platform with plenty of memory you can just")
print("  use them all.")
print("#Note")
print("The TunTrust cert is only intended for .tn domains, but")
print("  currently we do not support this restriction in our TLS code,")
print("  therefore it is currently omitted here, and in $MAP, but is")
print("  available on an opt-in basis.")
print("#Examples")
print("```")
print("  socket := tls.Socket.client tcp")
print("      --server_name=host")
print("      --root_certificates=certificate_roots.ALL")
print("```")
print("*/")
print("ALL ::= [")
for name in all_certs:
    cert = all_certs[name]
    if "TUNTRUST" not in cert:
      print("  %s," % (cert))
print("]")
