# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import fileinput
import re
import string

label_re = re.compile("^# Label: \"(.*)\"$")
arany_re = re.compile("^NETLOCK_ARANY")
begin_re = re.compile("^-----BEGIN")
end_re = re.compile("^-----END")

printing = False
name = None
all_certs = []

print("/// Root certificates, automatically extracted from Mozilla's NSS")
print("")
print("// This file was autogenerated from certdata.txt, which carried the")
print("// following copyright message:")
print("")
print("// This Source Code Form is subject to the terms of the Mozilla Public")
print("// License, v. 2.0. If a copy of the MPL was not distributed with this")
print("// file, You can obtain one at http://mozilla.org/MPL/2.0/.")
print("")
print("import net.x509 as net")
print("")

for line in fileinput.input():
    line = line.strip()
    captures = label_re.search(line)
    if captures != None:
        upper_case = captures.group(1).maketrans(
            "abcdefghijklmnopqrstuvwxyz -.",
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ___")
        name = captures.group(1).translate(upper_case)
        if arany_re.match(name) != None:
            name = "NETLOCK_ARANY"
        name = re.sub('_+', "_", name)
    if begin_re.match(line):
        printing = True
        print("%s_TEXT_ ::= \"\"\"\\" % (name))
        all_certs.append(name)
    if printing:
        print(line)
    if end_re.match(line):
        printing = False
        print("\"\"\"")
        print("")
        print("%s ::= net.Certificate.parse %s_TEXT_" % (name, name))
        print("")

print("")
print("/**")
print("A map from certificate name to certificate in text form.")
print("The text forms must be parsed with net.Certificate.parse")
print("  before they can be used as the --root_certificates argument")
print("*/")
print("ALL ::= {")
for cert in all_certs:
    print("  \"%s\": %s_TEXT_," % (cert, cert))
print("}")


